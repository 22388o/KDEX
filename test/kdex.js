const Dai = artifacts.require('mocks/Dai.sol');
const Bat = artifacts.require('mocks/Bat.sol');
const Rep = artifacts.require('mocks/Rep.sol');
const Zrx = artifacts.require('mocks/Zrx.sol');
const Dex = artifacts.require('Kdex.sol');

// accounts is the list of address generated by the local development blockchain
contract('Kdex', (accounts) => {
    let dai, bat, rep, zrx;
    const [DAI, BAT, REP, ZRX] = ['DAI', 'BAT', 'REP', 'ZRX']
        .map(ticker => web3.utils.fromAscii(ticker));
    // first two trader accounts
    const [trader1, trader2] = [accounts[1], accounts[2]];
    beforeEach(async() => {
        ([dai, bat, rep, zrx] = await Promise.all([
            Dai.new(),
            Bat.new(),
            Rep.new(),
            Zrx.new()
        ]));
        const dex = await Kdex.new();
        await Promise.all([
            dex.addToken(DAI,dai.address),
            dex.addToken(BAT,bat.address),
            dex.addToken(REP,rep.address),
            dex.addToken(ZRX,zrx.address)
        ]);
        // define amount of tokens I want to allocatoe to first two addresses.
        // converts eth to wei
        const amount = web3.utils.toWei('1000');
        const seedTokenBalance = async (token, trader) => {
            await token.faucet(trader, amount);
            await token.approve(
                dex.address,
                amount,
                {from: trader}
            )
        };
        // two trader addresses have an initial balance of all tokens.
        // Also have approved these tokens to be spent by the dex | see line 33
        await Promise.all(
            [dai,bat,rep,zrx].map(token => seedTokenBalance(token,trader1))
        );
        await Promise.all(
            [dai,bat,rep,zrx].map(token => seedTokenBalance(token,trader2))
        );
    });
});