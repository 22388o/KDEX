const { expectRevert } = require('@openzeppelin/test-helpers')
const Dai = artifacts.require('mocks/Dai.sol');
const Bat = artifacts.require('mocks/Bat.sol');
const Rep = artifacts.require('mocks/Rep.sol');
const Zrx = artifacts.require('mocks/Zrx.sol');
const Kdex = artifacts.require('Kdex.sol');

// accounts is the list of address generated by the local development blockchain
contract('Kdex', (accounts) => {
    let dai, bat, rep, zrx;
    const [DAI, BAT, REP, ZRX] = ['DAI', 'BAT', 'REP', 'ZRX']
        .map(ticker => web3.utils.fromAscii(ticker));
    // first two trader accounts
    const [trader1, trader2] = [accounts[1], accounts[2]];
    beforeEach(async () => {
        ([dai, bat, rep, zrx] = await Promise.all([
            Dai.new(),
            Bat.new(),
            Rep.new(),
            Zrx.new()
        ]));
        dex = await Kdex.new();
        await Promise.all([
            dex.addToken(DAI, dai.address),
            dex.addToken(BAT, bat.address),
            dex.addToken(REP, rep.address),
            dex.addToken(ZRX, zrx.address)
        ]);
        // define amount of tokens I want to allocatoe to first two addresses.
        // converts eth to wei
        const amount = web3.utils.toWei('1000');
        const seedTokenBalance = async (token, trader) => {
            await token.faucet(trader, amount);
            await token.approve(
                dex.address,
                amount,
                { from: trader }
            );
        };
        // two trader addresses have an initial balance of all tokens.
        // Also have approved these tokens to be spent by the dex | see line 33
        await Promise.all(
            [dai, bat, rep, zrx].map(token => seedTokenBalance(token, trader1))
        );
        await Promise.all(
            [dai, bat, rep, zrx].map(token => seedTokenBalance(token, trader2))
        );
    });
    // Allow user to deposit tokens
    it('should deposit tokens', async () => {
        const amount = web3.utils.toWei('100');
        await dex.deposit(
            amount,
            DAI,
            { from: trader1 }
        );
        const balance = await dex.traderBalances(trader1, DAI);
        assert(balance.toString() === amount);
    });
    //  User tries to deposit token that isnt registered on our smart contract via the add token function
    it('should NOT deposit tokens if token does not exist', async () => {
        // expect revert is an openzeppelin help function
        await expectRevert(
            dex.deposit(
                web3.utils.toWei('100'),
                web3.utils.fromAscii('TOKENDOESNOTEXIST'),
                { from: trader1 }
            ),
            // token exist modifier 
            'this token does not exist'
        );
    });
});